<?php
/*
 *Implementation of hook_menu.
 */
function site_info_menu() {
	$items  = array();
	$items['site-information'] = array(
	  'title' => 'Site Information',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('site_information'),
	  'access arguments' => array('site admin'),		
	);
	return $items;
}

/*
 * Site info system settings form.
 */
function site_information($form, &$form_state) {
	$form = array();
	$form['site_name'] = array(
	  '#type' => 'textfield',
	  '#title' => 'Site name',
	  '#default_value' => variable_get('site_name', ''),
	  '#description' => 'Enter Sitename here.',
	  '#required' => TRUE,
	);	
	$form['site_slogan'] = array(
		'#type' => 'textfield',
		'#title' => 'Slogan ',
		'#default_value' => variable_get('site_slogan', ''),
		'#description' => 'Enter logo description text here.',
	);
	$form['site_mail'] = array(
		'#type' => 'textfield',
		'#title'=> 'Site E-mail',
		'#default_value' => variable_get('site_mail', ''),
		'#description' => "The From address in automated e-mails sent during registration and new password requests, and other notifications. (Use an address ending in your site's domain to help prevent this e-mail being flagged as spam.)",
		'#required' => TRUE,
	);
	//$form['purple_site_popup'] = array(
	//    '#type' => 'radios',
	//	'#title'=> 'Popup forms',
	//	'#options' => array(0 => t('No'), 1 => t('Yes')),
	//	'#description' => t('If check Yes "site forms" will open in popup. otherwise it will redirect to page.'),
	//	'#default_value' => variable_get('purple_site_popup', 0),
	//	'#required' => TRUE,
	//);	
	$form['purple_site_footer'] = array(
		'#type' => 'textfield',
		'#title'=> 'Footer text',
		'#default_value' => variable_get('purple_site_footer', t('Copyright')),
		'#description' => 'Enter copyright text here ( @year text replace with current Year )',
		'#required' => TRUE,		
	);	
	
	/*$form['purple_program_signup'] = array(
		'#type' => 'textarea',
		'#title'=> 'Program signup message',
		'#default_value' => variable_get('purple_program_signup', t('Thank you for joining us in our mission to save lives. @firstname @lastname is successfully registered with the South Asian Heart Center')),
		'#description' => 'Enter program signup text here ( @firstname @lastname text replace with users first and last name )',
		'#required' => TRUE,		
	);
	$form['purple_refer_signup'] = array(
		'#type' => 'textarea',
		'#title'=> 'Referring physicians signup message',
		'#default_value' => variable_get('purple_refer_signup', t('Thank you for signing up for the Physician. @firstname @lastname has/have been registered. We will get in touch with you to schedule your appointments.')),
		'#description' => 'Enter referring physicians signup text here ( @firstname @lastname text replace with users first and last name )',
		'#required' => TRUE,		
	);
	$form['purple_volunteer_signup'] = array(
		'#type' => 'textarea',
		'#title'=> 'Volunteer signup message',
		'#default_value' => variable_get('purple_volunteer_signup', t('Thank you for signing up for the Volunteer. @firstname @lastname has/have been registered. We will get in touch with you to schedule your appointments.')),
		'#description' => 'Enter volunteer signup text here ( @firstname @lastname text replace with users first and last name )',
		'#required' => TRUE,		
	);*/
	
	//$form['db']= array(
	//  '#type' => 'fieldset',
	//	'#title' => 'Add DB Credentials',
	//);
	//$form['db']['add_host_name'] = array(
	//  '#type' => 'textfield',
	//	'#title' => 'Host Name',
	//	'#default_value' => variable_get('add_host_name', ''),
	//);
	//$form['db']['add_db_username'] = array(
	//  '#type' => 'textfield',
	//	'#title' => 'DB Username',
	//	'#default_value' => variable_get('add_db_username', ''),
	//);
	//$form['db']['add_db_password'] = array(
	//  '#type' => 'textfield',
	//	'#title' => 'DB Password',
	//	'#default_value' => variable_get('add_db_password', ''),
	//);
	//$form['db']['add_db_name'] = array(
	//  '#type' => 'textfield',
	//	'#title' => 'DB Name',
	//	'#default_value' => variable_get('add_db_name', ''),
	//);
	
	$key = variable_get('theme_default', '');
	//$var = 'theme_' . $key . '_settings';
	//dsm($key);
	//dsm(theme_get_setting('logo_path', $key));
	 // Default settings are defined in theme_get_setting() in includes/theme.inc
  if ($key) {
    $var = 'theme_' . $key . '_settings';
    $themes = list_themes();
    $features = $themes[$key]->info['features'];
  }
  else {
    $var = 'theme_settings';
  }
  
  $form['var'] = array('#type' => 'hidden', '#value' => $var);
  //dsm($features);
  
  // Logo settings
  if ((!$key) || in_array('logo', $features)) {
    $form['logo'] = array(
      '#type' => 'fieldset',
      '#title' => t('Logo image settings'),
      '#description' => t('If toggled on, the following logo will be displayed.'),
      '#attributes' => array('class' => array('theme-settings-bottom')),
    );
    $form['logo']['default_logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the default logo'),
      '#default_value' => theme_get_setting('default_logo', $key),
      '#tree' => FALSE,
      '#description' => t('Check here if you want the theme to use the logo supplied with it.')
    );
    $form['logo']['settings'] = array(
      '#type' => 'container',
      '#states' => array(
        // Hide the logo settings when using the default logo.
        'invisible' => array(
          'input[name="default_logo"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['logo']['settings']['logo_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to custom logo'),
      '#description' => t('The path to the file you would like to use as your logo file instead of the default logo.'),
      '#default_value' => theme_get_setting('logo_path', $key),
    );
    $form['logo']['settings']['logo_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload logo image'),
      '#maxlength' => 40,
      '#description' => t("If you don't have direct file access to the server, use this field to upload your logo.")
    );
  }

  if ((!$key) || in_array('favicon', $features)) {
    $form['favicon'] = array(
      '#type' => 'fieldset',
      '#title' => t('Shortcut icon settings'),
      '#description' => t("Your shortcut icon, or 'favicon', is displayed in the address bar and bookmarks of most browsers."),
    );
    $form['favicon']['default_favicon'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the default shortcut icon.'),
      '#default_value' => theme_get_setting('default_favicon', $key),
      '#description' => t('Check here if you want the theme to use the default shortcut icon.')
    );
    $form['favicon']['settings'] = array(
      '#type' => 'container',
      '#states' => array(
        // Hide the favicon settings when using the default favicon.
        'invisible' => array(
          'input[name="default_favicon"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['favicon']['settings']['favicon_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to custom icon'),
      '#description' => t('The path to the image file you would like to use as your custom shortcut icon.'),
      '#default_value' => theme_get_setting('favicon_path', $key),
    );
    $form['favicon']['settings']['favicon_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload icon image'),
      '#description' => t("If you don't have direct file access to the server, use this field to upload your shortcut icon.")
    );
  }

  // Inject human-friendly values for logo and favicon.
  foreach (array('logo' => 'logo.png', 'favicon' => 'favicon.ico') as $type => $default) {
    if (isset($form[$type]['settings'][$type . '_path'])) {
      $element = &$form[$type]['settings'][$type . '_path'];

      // If path is a public:// URI, display the path relative to the files
      // directory; stream wrappers are not end-user friendly.
      $original_path = $element['#default_value'];
      $friendly_path = NULL;
      if (file_uri_scheme($original_path) == 'public') {
        $friendly_path = file_uri_target($original_path);
        $element['#default_value'] = $friendly_path;
      }
    }
  }

  if ($key) {
    // Call engine-specific settings.
    $function = $themes[$key]->prefix . '_engine_settings';
    if (function_exists($function)) {
      $form['engine_specific'] = array(
        '#type' => 'fieldset',
        '#title' => t('Theme-engine-specific settings'),
        '#description' => t('These settings only exist for the themes based on the %engine theme engine.', array('%engine' => $themes[$key]->prefix)),
      );
      $function($form, $form_state);
    }

    // Create a list which includes the current theme and all its base themes.
    if (isset($themes[$key]->base_themes)) {
      $theme_keys = array_keys($themes[$key]->base_themes);
      $theme_keys[] = $key;
    }
    else {
      $theme_keys = array($key);
    }

    // Save the name of the current theme (if any), so that we can temporarily
    // override the current theme and allow theme_get_setting() to work
    // without having to pass the theme name to it.
    $default_theme = !empty($GLOBALS['theme_key']) ? $GLOBALS['theme_key'] : NULL;
    $GLOBALS['theme_key'] = $key;

    // Process the theme and all its base themes.
    foreach ($theme_keys as $theme) {
      // Include the theme-settings.php file.
      $filename = DRUPAL_ROOT . '/' . str_replace("/$theme.info", '', $themes[$theme]->filename) . '/theme-settings.php';
      if (file_exists($filename)) {
        require_once $filename;
      }

      // Call theme-specific settings.
      $function = $theme . '_form_site_information_alter';
      if (function_exists($function)) {
        $function($form, $form_state);
      }
    }

    // Restore the original current theme.
    if (isset($default_theme)) {
      $GLOBALS['theme_key'] = $default_theme;
    }
    else {
      unset($GLOBALS['theme_key']);
    }
  }

  $form = system_settings_form($form);
  // We don't want to call system_settings_form_submit(), so change #submit.
  //array_pop($form['#submit']);
  $form['#submit'][] = 'site_information_submit';
  $form['#validate'][] = 'site_information_validate';
  return $form;
  
}

/**
 * Validator for the site_information() form.
 */
function site_information_validate($form, &$form_state) {
  // Handle file uploads.
  $validators = array('file_validate_is_image' => array());

  // Check for a new uploaded logo.
  $file = file_save_upload('logo_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['logo_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('logo_upload', t('The logo could not be uploaded.'));
    }
  }

  $validators = array('file_validate_extensions' => array('ico png gif jpg jpeg apng svg'));

  // Check for a new uploaded favicon.
  $file = file_save_upload('favicon_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['favicon_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('favicon_upload', t('The favicon could not be uploaded.'));
    }
  }

  // If the user provided a path for a logo or favicon file, make sure a file
  // exists at that path.
  if ($form_state['values']['logo_path']) {
    $path = _site_information_validate_path($form_state['values']['logo_path']);
    if (!$path) {
      form_set_error('logo_path', t('The custom logo path is invalid.'));
    }
  }
  if ($form_state['values']['favicon_path']) {
    $path = _site_information_validate_path($form_state['values']['favicon_path']);
    if (!$path) {
      form_set_error('favicon_path', t('The custom favicon path is invalid.'));
    }
  }
}

/**
 * Helper function for the site_information form.
 *
 * Attempts to validate normal system paths, paths relative to the public files
 * directory, or stream wrapper URIs. If the given path is any of the above,
 * returns a valid path or URI that the theme system can display.
 *
 * @param $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 * @return mixed
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function _site_information_validate_path($path) {
  // Absolute local file paths are invalid.
  if (drupal_realpath($path) == $path) {
    return FALSE;
  }
  // A path relative to the Drupal root or a fully qualified URI is valid.
  if (is_file($path)) {
    return $path;
  }
  // Prepend 'public://' for relative file paths within public filesystem.
  if (file_uri_scheme($path) === FALSE) {
    $path = 'public://' . $path;
  }
  if (is_file($path)) {
    return $path;
  }
  return FALSE;
}

/**
 * Process site_information form submissions.
 */
function site_information_submit($form, &$form_state) {
  // Exclude unnecessary elements before saving.
  form_state_values_clean($form_state);
  	
    $values = $form_state['values'];
 
  
  // Extract the name of the theme from the submitted form values, then remove
  // it from the array so that it is not saved as part of the variable.
  $key = $values['var'];
  $values1 = variable_get($key);
  //dsm($key);
  unset($values['var']);
  
   unset($values['site_name']);
   unset($values['site_slogan']);
   unset($values['site_mail']);
   unset($values['sl_footer']);
   
 // dsm($values1);
 // dsm($values, 'test');
 // dsm(file_unmanaged_copy($values['logo_upload']->uri));
  
  // If the user uploaded a new logo or favicon, save it to a permanent location
  // and use it in place of the default theme-provided file.
  if(isset($values['logo_upload'])) {
  if ($file = $values['logo_upload']) {
  //dsm($file);
    unset($values['logo_upload']);
    $filename = file_unmanaged_copy($file->uri);
    $values['default_logo'] = 0;
    $values['logo_path'] = $filename;
    $values['toggle_logo'] = 1;
  }
  }
  if(isset($values['favicon_upload'])) {
  if ($file = $values['favicon_upload']) {
    unset($values['favicon_upload']);
    $filename = file_unmanaged_copy($file->uri);
    $values['default_favicon'] = 0;
    $values['favicon_path'] = $filename;
    $values['toggle_favicon'] = 1;
  }
  }

  // If the user entered a path relative to the system files directory for
  // a logo or favicon, store a public:// URI so the theme system can handle it.
  if (!empty($values['logo_path'])) {
    $values['logo_path'] = _site_information_validate_path($values['logo_path']);
  }
  if (!empty($values['favicon_path'])) {
    $values['favicon_path'] = _site_information_validate_path($values['favicon_path']);
  }

  if (empty($values['default_favicon']) && !empty($values['favicon_path'])) {
    $values['favicon_mimetype'] = file_get_mimetype($values['favicon_path']);
  }
  
  //dsm($values);
  //dsm($values1);
  
	if(isset($values1)) {
    $merge = $values + $values1;
	} else {
		$merge = $values;
	}
  variable_set($key, $merge);
 // drupal_set_message(t('The configuration options have been saved.'));

  cache_clear_all();
}
